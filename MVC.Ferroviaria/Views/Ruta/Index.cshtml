@model IEnumerable<Modelos.Ferroviario.Modelos.Ruta>

@{
    ViewData["Title"] = "Index";
}

<h1>Rutas Disponibles</h1>

<table class="table table-striped">
    <thead class="table-light">
        <tr>
            <th>@Html.DisplayNameFor(model => model.CiudadInicio)</th>
            <th>@Html.DisplayNameFor(model => model.CiudadDestino)</th>
            <th>@Html.DisplayNameFor(model => model.Descripcion)</th>
            <th>@Html.DisplayNameFor(model => model.PrecioBase)</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.CiudadInicio</td>
                <td>@item.CiudadDestino</td>
                <td>@item.Descripcion</td>
                <td>$@item.PrecioBase</td>
                <td>
                    <button class="btn btn-outline-primary btn-sm" onclick="mostrarMapa('@item.CiudadInicio', '@item.CiudadDestino')">Ver Mapa</button>
                    @Html.ActionLink("Ver Horarios", "Index", "Horario", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Contenedor del mapa -->
<div id="mapContainer" class="mt-4" style="display:none;">
    <h4 class="text-primary">Recorrido ferroviario</h4>
    <p class="text-muted">Selecciona una ruta para visualizarla en el mapa.</p>
    <div id="map" style="height: 400px; border: 1px solid #ccc; border-radius: 8px;"></div>
    <div id="infoRuta" class="mt-3"></div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

    <script>
        let map;

        // Coordenadas fijas actualizadas con grados decimales que diste
        const coordenadasEstaciones = {
            "Estación del Ferrocarril Ibarra": [0.34715298, -78.12134704],
            "Estación Andrade Marin": [0.3179888, -78.2182722],
            "Estacion Tren Salinas Ecuador": [0.55, -78.13333]
        };

        async function mostrarMapa(origen, destino) {
            document.getElementById("mapContainer").style.display = "block";

            if (!map) {
                // Centro inicial con vista más general para que se vean todas las estaciones
                map = L.map("map").setView([0.4, -78.15], 9);
                L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                    maxZoom: 18,
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
            } else {
                map.eachLayer((layer) => {
                    if (layer instanceof L.Polyline || layer instanceof L.Marker) {
                        map.removeLayer(layer);
                    }
                });
            }

            function getCoordenadas(ciudad) {
                if (coordenadasEstaciones[ciudad]) {
                    return coordenadasEstaciones[ciudad];
                }
                throw new Error("No hay coordenadas definidas para " + ciudad);
            }

            try {
                const origenCoords = getCoordenadas(origen);
                const destinoCoords = getCoordenadas(destino);

                L.marker(origenCoords).addTo(map).bindPopup("Estación Origen: " + origen).openPopup();
                L.marker(destinoCoords).addTo(map).bindPopup("Estación Destino: " + destino);

                const rutaURL = `https://router.project-osrm.org/route/v1/driving/${origenCoords[1]},${origenCoords[0]};${destinoCoords[1]},${destinoCoords[0]}?overview=full&geometries=geojson`;
                const resRuta = await fetch(rutaURL);
                const dataRuta = await resRuta.json();

                const coordsRuta = dataRuta.routes[0].geometry.coordinates.map(c => [c[1], c[0]]);
                const ruta = L.polyline(coordsRuta, { color: 'darkred', weight: 5, dashArray: '8, 6' }).addTo(map);
                map.fitBounds(ruta.getBounds());

                const duracion = dataRuta.routes[0].duration / 60;
                const distancia = dataRuta.routes[0].distance / 1000;

                document.getElementById("infoRuta").innerHTML = `
                    <div class="alert alert-info">
                        <strong>Distancia estimada:</strong> ${distancia.toFixed(2)} km<br>
                        <strong>Duración aproximada:</strong> ${duracion.toFixed(1)} minutos<br>
                        <strong>Recorrido:</strong> Recorrido aproximado para tren turístico dentro de Imbabura
                    </div>`;
            } catch (e) {
                console.error("Error en la simulación:", e);
                document.getElementById("infoRuta").innerHTML = `
                    <div class="alert alert-danger">No se pudo simular la ruta. Verifica los nombres o intenta más tarde.</div>`;
            }
        }
    </script>
}
